openapi: 3.0.3
info:
  title: ImpactHub API
  description: |
    Comprehensive API for ImpactHub - An AI-powered educational platform that provides 
    personalized learning experiences, community features, and sustainability tools.
    
    ## Features
    - **AI-Powered Learning**: Homework help, learning path generation, and personalized content
    - **Interactive Lessons**: Subject-based lessons with quizzes and progress tracking
    - **Community Platform**: Discussion forums, mentorship matching, and peer learning
    - **Gamification**: Achievements, points, levels, and learning streaks
    - **Analytics**: Learning progress tracking and performance insights
    
    ## Authentication
    This API uses Supabase Auth with JWT tokens. Include the Authorization header with Bearer token for authenticated endpoints.
    
    ## Rate Limiting
    - **General API**: 1000 requests per hour per user
    - **AI Endpoints**: 100 requests per day per user
    - **File Uploads**: 50 requests per hour per user
    
    ## Error Handling
    All errors follow RFC 7807 Problem Details format with consistent error codes and messages.
  version: 1.0.0
  contact:
    name: ImpactHub API Support
    email: api-support@impacthub.com
    url: https://docs.impacthub.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://impacthub.com/terms

servers:
  - url: https://api.impacthub.com/v1
    description: Production server
  - url: https://staging-api.impacthub.com/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # =====================================================
  # AUTHENTICATION ENDPOINTS
  # =====================================================
  /auth/signup:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: SecurePass123!
                name:
                  type: string
                  minLength: 2
                  maxLength: 255
                  example: John Doe
                grade:
                  type: integer
                  minimum: 1
                  maximum: 12
                  example: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimit'

  /auth/signin:
    post:
      tags: [Authentication]
      summary: Sign in user
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: SecurePass123!
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimit'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      description: Get a new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/signout:
    post:
      tags: [Authentication]
      summary: Sign out user
      description: Invalidate current session and tokens
      responses:
        '200':
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully signed out

  # =====================================================
  # USER PROFILE ENDPOINTS
  # =====================================================
  /users/profile:
    get:
      tags: [User Profile]
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags: [User Profile]
      summary: Update user profile
      description: Update the authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/preferences:
    get:
      tags: [User Profile]
      summary: Get user preferences
      description: Retrieve user's application preferences and settings
      responses:
        '200':
          description: Preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
    put:
      tags: [User Profile]
      summary: Update user preferences
      description: Update user's application preferences and settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'

  /users/dashboard:
    get:
      tags: [User Profile]
      summary: Get user dashboard data
      description: Retrieve comprehensive dashboard statistics for the user
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

  # =====================================================
  # SUBJECTS ENDPOINTS
  # =====================================================
  /subjects:
    get:
      tags: [Subjects]
      summary: Get all subjects
      description: Retrieve list of all available subjects
      security: []
      parameters:
        - name: grade
          in: query
          description: Filter subjects by grade level
          schema:
            type: integer
            minimum: 1
            maximum: 12
        - name: category
          in: query
          description: Filter subjects by category
          schema:
            type: string
            enum: [STEM, Language Arts, Social Studies, Arts, Life Skills]
      responses:
        '200':
          description: Subjects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subject'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /subjects/{subjectId}:
    get:
      tags: [Subjects]
      summary: Get subject by ID
      description: Retrieve detailed information about a specific subject
      security: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Subject retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/NotFound'

  # =====================================================
  # LESSONS ENDPOINTS
  # =====================================================
  /lessons:
    get:
      tags: [Lessons]
      summary: Get lessons
      description: Retrieve lessons with filtering and pagination
      security: []
      parameters:
        - name: subject_id
          in: query
          description: Filter by subject ID
          required: true
          schema:
            type: string
            format: uuid
        - name: difficulty
          in: query
          description: Filter by difficulty level
          schema:
            type: string
            enum: [beginner, intermediate, advanced]
        - name: grade
          in: query
          description: Filter by grade level
          schema:
            type: integer
            minimum: 1
            maximum: 12
        - name: search
          in: query
          description: Search in lesson titles and descriptions
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Lessons retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Lesson'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '400':
          $ref: '#/components/responses/BadRequest'

  /lessons/{lessonId}:
    get:
      tags: [Lessons]
      summary: Get lesson by ID
      description: Retrieve detailed lesson content and metadata
      security: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lesson retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /lessons/{lessonId}/progress:
    get:
      tags: [Lessons]
      summary: Get lesson progress
      description: Get current user's progress for a specific lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonProgress'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Lessons]
      summary: Update lesson progress
      description: Update user's progress for a specific lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                progress_percentage:
                  type: integer
                  minimum: 0
                  maximum: 100
                status:
                  type: string
                  enum: [not_started, in_progress, completed, bookmarked]
                time_spent_minutes:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonProgress'