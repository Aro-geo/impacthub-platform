// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import jwtConfig from '@/config/jwtConfig';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://otxttowidmshxzzfxpdu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "sb_publishable_aDvcyizh0mHCFBVz38hPQQ_zXQO7ish";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'impacthub-auth',
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-client-info': 'impacthub-web'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// JWT Configuration and utilities
export const jwtUtils = {
  // Get the current JWT token from the session
  getCurrentToken: async () => {
    const { data: { session } } = await supabase.auth.getSession();
    return session?.access_token || null;
  },
  
  // Validate JWT token format and expiration
  isTokenValid: (token: string): boolean => {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);
      return payload.exp > now;
    } catch {
      return false;
    }
  },
  
  // Get JWT configuration
  getJWTConfig: () => jwtConfig,
  
  // Refresh token if needed
  refreshTokenIfNeeded: async (threshold = 300) => { // 5 minutes before expiry
    const session = await supabase.auth.getSession();
    if (session.data.session) {
      const token = session.data.session.access_token;
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);
      const timeUntilExpiry = payload.exp - now;
      
      if (timeUntilExpiry < threshold) {
        console.log('Refreshing JWT token...');
        await supabase.auth.refreshSession();
      }
    }
  }
};

// Add connection health check
export const checkConnection = async () => {
  try {
    const { error } = await supabase.from('profiles').select('id').limit(1);
    return !error;
  } catch {
    return false;
  }
};

// Exponential backoff session refresh helper
export async function safeRefreshSession(maxAttempts = 3) {
  let lastError: any = null;
  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    try {
      const start = performance.now();
      const { data, error } = await supabase.auth.refreshSession();
      if (!error && data?.session) {
        console.log('[auth] refresh success', { attempt: attempt + 1, ms: Math.round(performance.now() - start) });
        return data.session;
      }
      lastError = error || new Error('Unknown refresh error');
    } catch (err) {
      lastError = err;
    }
    // Backoff delay (200ms, 600ms, 1400ms...)
    const delay = 200 * Math.pow(2, attempt) - (attempt === 0 ? 0 : 0);
    await new Promise(r => setTimeout(r, delay));
  }
  console.warn('[auth] refresh failed after retries', lastError);
  throw lastError;
}