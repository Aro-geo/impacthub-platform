// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import jwtConfig from '@/config/jwtConfig';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://otxttowidmshxzzfxpdu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "sb_publishable_aDvcyizh0mHCFBVz38hPQQ_zXQO7ish";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'impacthub-auth',
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

// JWT Configuration and utilities
export const jwtUtils = {
  // Get the current JWT token from the session
  getCurrentToken: async () => {
    const { data: { session } } = await supabase.auth.getSession();
    return session?.access_token || null;
  },
  
  // Validate JWT token format and expiration
  isTokenValid: (token: string): boolean => {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);
      return payload.exp > now;
    } catch {
      return false;
    }
  },
  
  // Get JWT configuration
  getJWTConfig: () => jwtConfig,
  
  // Refresh token if needed
  refreshTokenIfNeeded: async (threshold = 300) => { // 5 minutes before expiry
    const session = await supabase.auth.getSession();
    if (session.data.session) {
      const token = session.data.session.access_token;
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);
      const timeUntilExpiry = payload.exp - now;
      
      if (timeUntilExpiry < threshold) {
        console.log('Refreshing JWT token...');
        await supabase.auth.refreshSession();
      }
    }
  }
};